<?php

/**
 * Infinity Fab Lab Charge Process Module
 *
 * Developed for the Infinity Fab Lab at the University of Florida.
 * Lists and allows adding and editing Lab Charge pages.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 */

class ProcessLabCharge extends ProcessPageType {

	static public function getModuleInfo() {
		return array(
			'title'      => __('Lab Charges', __FILE__), // getModuleInfo title
			'version'    => 100,
			'summary'    => __('Manage lab charges', __FILE__), // getModuleInfo summary
			'permission' => 'user-admin',
			'icon'       => 'credit-card',
      'requires'   => array('LabCharger'),
			'useNavJSON' => true,
		);
	}

	public function __construct() {
		$this->set("maxAjaxQty", 25);
		$this->set('addLabel', 'Create New Charge');
		$this->set('jsonListLabel', 'title'); // what to use for 'label' property in JSON nav data
	$showFields = array('title', 'lab_charge_item', 'lab_charge_ufid', 'lab_charge_amount', 'lab_charge_sent'/*, 'lab_charge_processed'*/);
		$this->set('showFields', $showFields);
	}

	public function init() {
		parent::init();
		$this->addHookAfter('ProcessPageLister::execute', $this, 'hookAfterListerExecute');
		$this->addHookAfter('ProcessPageAdd::buildForm', $this, 'hookAfterPageAddBuildForm');
		$this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookAfterPageEditBuildForm');
		// $this->addHook('LazyCron::everyDay', $this, 'hookCheckForProcessedRecords');
	}

	protected function useLister() {
		return true;
	}

	public function ___execute() {
		if($this->wire('input')->post('records-submit')){
			$ids = explode("+", $this->wire('input')->post('records-ids'));
			$idstr = implode("|", $ids);
			$text = '';
			$charges = $this->wire('pages')->find("id=".$idstr);
			foreach ($charges as $charge) {
				$text .= $this->renderDetailRecord($charge)."\n";
				$charge->of(false);
				$charge->set('lab_charge_sent', 1);
				$charge->save();
				$charge->of(true);
			}
			$text .= "\n".$this->renderTrailerRecord($charges);
			// write text to file
			$dir = $this->wire('config')->paths->assets.'charges/';
			// input file names should be DCPSFAR.yyyymmdd.txt where yyyymmdd is todayâ€™s date
			if(intval(date('G')) < 17){
				$filename = "DCPSFAR.".date('Ymd').".txt";
			} else {
				$filename = "DCPSFAR.".date('Ymd', time()+(60*60*24)).".txt";
			}

			$filepath = $dir.$filename;
			if (!is_dir($dir)) {
			  // dir doesn't exist, make it
			  mkdir($dir);
			}
			file_put_contents($filepath, $text);
			// curl file to webdav server
			$chargerConfig = $this->wire('modules')->getModuleConfigData('LabCharger');
			$url = $chargerConfig['lab_charger_server_url'];
			$path = $chargerConfig['lab_charger_server_incoming_path'];
			$user = $chargerConfig['lab_charger_server_user'];
			$pass = $chargerConfig['lab_charger_server_password'];
			// $this->message("curl ".$url.$path." -u ".$user.":".$pass);
			$response = $this->curlPutFile($user, $pass, $url, $path, $filepath, $filename);
			// $this->message($response);
		}
		$out = parent::___execute();
		return $out;
	}

	public function ___executeAdd() {
		$out = parent::___executeAdd();
		return $out;
	}

	public function ___executeEdit() {
		$out = parent::___executeEdit();
		return $out;
	}

	public function ___executeRender() {
		if(!$this->wire('config')->ajax) return;
		$out = "";
		$ids = implode("|", explode("+", $this->wire('input')->get('ids')));
		$charges = $this->wire('pages')->find("id=".$ids);
		foreach ($charges as $charge) {
			$out .= $this->renderDetailRecord($charge)."\n";
		}
		$out .= "\n".$this->renderTrailerRecord($charges);
		return $out;
	}

	protected function hookAfterListerExecute(HookEvent $event){

		if($this->wire('config')->ajax) return $event->return;

		$btn = $this->wire('modules')->get('InputfieldButton');
		$btn->attr('id', 'ProcessLabChargeRenderButton');
		$btn->attr('value', 'Generate Record File');
		$btn->attr('disabled', 'disabled');
		$btn->icon = 'pencil-square-o';

		$spinner = '<span id="ProcessLabChargeRecordsSpinner"><i class="fa fa-spinner fa-spin fa-3x fa-fw"></i></span>';

		$form = $this->wire('modules')->get('InputfieldForm');
		$form->attr('id', 'ProcessLabChargeRecordsForm');
		$form->method = 'post';
		$form->action = './';
		$form->attr('title', 'Lab Charge Records');

		$field = $this->wire('modules')->get('InputfieldTextarea');
		$field->attr('rows', 10);
		$field->attr('id', 'ProcessLabChargeRecordsText');
		$field->attr('name', 'records-text');
		$field->attr('readonly', true);
		$field->label = "Record File Text";
		$form->add($field);

		$field = $this->wire('modules')->get('InputfieldHidden');
		$field->attr('id', 'ProcessLabChargeRecordsIds');
		$field->attr('name', 'records-ids');
		$form->add($field);

		$field = $this->wire('modules')->get('InputfieldSubmit');
		$field->attr('value', "Send Charge Record");
		$field->attr('id', 'ProcessLabChargeRecordsSubmit');
		$field->attr('name', 'records-submit');
		$field->icon = 'upload';
		$form->add($field);

		$out = "<div class='ProcessLabChargeRecords'>".$btn->render().$spinner.$form->render()."</div>";

		$event->return = $out.$event->return;
	}

	protected function hookAfterPageAddBuildForm(HookEvent $event){
		$form = $event->return;
		$formSave = $form->children('name=submit_save')->first();
		// item
		$field = $this->wire('fields')->get('lab_charge_item')->getInputfield(new NullPage());
		$form->insertBefore($field, $formSave);
		// amount
		$field = $this->wire('fields')->get('lab_charge_amount')->getInputfield(new NullPage());
		$form->insertBefore($field, $formSave);
		// ufid
		$field = $this->wire('fields')->get('lab_charge_ufid')->getInputfield(new NullPage());
		$form->insertBefore($field, $formSave);
		// ref
		$field = $this->wire('fields')->get('lab_charge_reference_number')->getInputfield(new NullPage());
		$field->value = $this->getNextReferenceNumber();
		$form->insertBefore($field, $formSave);
		// term
		$field = $this->wire('fields')->get('lab_charge_term')->getInputfield(new NullPage());
		$field->value = $this->getCurrentTerm();
		$form->insertBefore($field, $formSave);
		// due date
		$field = $this->wire('fields')->get('lab_charge_due_date')->getInputfield(new NullPage());
		$field->value = $this->getDueDate();
		$form->insertBefore($field, $formSave);

		$event->return = $form;
	}

	protected function hookAfterPageEditBuildForm(HookEvent $event){
		$form = $event->return;
		$id = (int) $this->input->post('id');
		if(!$id) $id = (int) $this->input->get('id');
		$charge = $this->wire('pages')->get((int) $id);

		$field = wire('modules')->get('InputfieldTextarea');
		$field->name = 'lab-charge-detail-record';
		$field->label = 'Lab Charge Detail Record';
		$field->value = $this->renderDetailRecord($charge);
		$form->prepend($field);

		$event->return = $form;
	}

	protected function getNextReferenceNumber(){
		$labChargesPageID = $this->wire('modules')->getModuleConfigData('LabCharger')['lab_charges_id'];
		$charges = $this->wire('pages')->find('parent_id='.$labChargesPageID);
		if(count($charges)){
			$charges->sort('-lab_charge_reference_number');
			return $charges->first()->get('lab_charge_reference_number') + 1;
		} else {
			// no charges yet
			return 1;
		}
	}

	protected function getCurrentTerm(){
		$data = $this->wire('modules')->getModuleConfigData('LabCharger');
		$springStart = $data['lab_charger_spring_start'];
		$summerStart = $data['lab_charger_summer_start'];
		$fallStart = $data['lab_charger_fall_start'];
		$c = substr(date('Y'), 0, 1);
		$yy = date('y');
		$now = time();
		if($now >= $springStart && $now <= $summerStart){
			// spring
			$t = 1;
		} else if($now >= $summerStart && $now <= $fallStart){
			// summer
			$t = 5;
		} else if($now >= $fallStart){
			// fall
			$t = 8;
		} else {
			return "Error generating term code - please ensure term start dates are configured correctly in the Lab Charger module configuration page.";
		}
		return $c.$yy.$t;
	}

	protected function getDueDate () {
		$data = $this->wire('modules')->getModuleConfigData('LabCharger');
		$graceSeconds = $data['lab_charger_grace_period']*86400; //60*60*24
		return time()+$graceSeconds;
	}

	private function renderDetailRecord(Page $charge){
		$chargerConfig = $this->wire('modules')->getModuleConfigData('LabCharger');
		$item = $charge->lab_charge_item;
		$detail = "";
		$acct_type = $chargerConfig['lab_charger_account_type'];
		$filler = " ";
		$item_type = $item->lab_charge_item_type;
		$ufid = $charge->lab_charge_ufid;
		$amount = $charge->lab_charge_amount;
		$ref_number = $charge->lab_charge_reference_number;
		$term = $charge->lab_charge_term;
		$due_date = date('mdY',$charge->lab_charge_due_date);
		$reversal = ($charge->lab_charge_reversal) ? "Y" : " " ;
		$detail.=$acct_type.$filler.$item_type.$ufid;
		$int_amount = substr($amount, 0, count($amount)-4);
		$decimal_amount = substr($amount, -3);
		$amount = str_pad($int_amount, 18, " ", STR_PAD_LEFT).$decimal_amount;
		$detail.=$amount.str_pad($chargerConfig['lab_charger_reference_code'].str_pad($ref_number, 8, "0", STR_PAD_LEFT), 30, " ", STR_PAD_RIGHT);
		$detail.=$term.$due_date.$reversal;
		$detail = str_pad($detail, 120, " ", STR_PAD_RIGHT);
		return $detail;
	}

	private function renderTrailerRecord($charges){
		$data = $this->wire('modules')->getModuleConfigData('LabCharger');
		$gt = $data['lab_charger_group_type'];
		$oid = $data['lab_charger_origin_id'];
		$datetime = date('m-d-YH:i:s');
		$numRecs = str_pad(number_format(count($charges), 0, "", ""), 10, " ", STR_PAD_LEFT);
		$total = 0;
		foreach ($charges as $charge) {
			$amount = floatval($charge->get('lab_charge_amount'));
			$total+=$amount;
		}
		$total = number_format($total, 2, ".", "");
		// $int_total = substr($total, 0, count($total)-4);
		// $decimal_total = substr($total, -3);
		$total = str_pad($total, 15, " ", STR_PAD_LEFT);
		return str_pad($gt.$oid.$datetime.$numRecs.$total, 120, " ", STR_PAD_RIGHT);
	}

	/**
	 * Return an array of Lister settings, ready to be populated to Lister
	 *
	 * @param ProcessPageLister $lister
	 * @param string $selector
	 * @return array
	 *
	 */
	protected function getListerSettings(ProcessPageLister $lister, $selector) {
		$settings = parent::getListerSettings($lister, $selector);
		$settings['defaultSort'] = '-created';
		return $settings;
	}

	private function curlPutFile ($user, $pass, $url, $path, $filepath, $destfile) {
		$curl = curl_init();
		$file = fopen($filepath, 'r');

		$curl_options = [
		CURLOPT_HTTPAUTH => CURLAUTH_ANY,
		CURLOPT_RETURNTRANSFER => true,
		CURLOPT_USERPWD => $user.":".$pass,
		CURLOPT_URL => $url.$path.$destfile,
		CURLOPT_HEADER => true,
		CURLOPT_VERBOSE => true,
		CURLOPT_PUT => true,
		CURLOPT_INFILE => $file,
		CURLOPT_INFILESIZE => filesize($filepath)
		];
		curl_setopt_array($curl, $curl_options);

		$result = curl_exec($curl);
		curl_close($curl);
		fclose($file);
		return $result;
	}

	private function curlGetFile ($user, $pass, $url, $path) {
		$curl = curl_init();

		$curl_options = [
		CURLOPT_HTTPAUTH => CURLAUTH_ANY,
		CURLOPT_RETURNTRANSFER => 1,
		CURLOPT_USERPWD => $user.":".$pass,
		CURLOPT_URL => $url.$path,
		CURLOPT_HEADER => true,
		CURLOPT_VERBOSE => true
		];
		curl_setopt_array($curl, $curl_options);

		$result = curl_exec($curl);
		curl_close($curl);
		return $result;
	}

}
?>
