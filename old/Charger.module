<?php
/**
 * A²Fab Lab User Extensions Module
 *
 * Developed for the A² Fab Lab at the University of Florida.
 * Root Module that handles installing, uninstalling and hooking together
 * the child modules for the Lab User extensions. Login, registration, account
 * management and applying charges are all covered.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 *
 */

 class Charger extends WireData implements Module, ConfigurableModule {

   protected $chargesPageID;
   protected $itemsPageID;
   protected $uploadsPageID;

   public static function getModuleInfo(){
     return array(
       'title' => 'A² Fab Lab Charger',
       'summary' => 'The Root Module for the A² Fab Lab Charge System',
       'version' => 100,
       'author' => "Thomas R Storey",
       'autoload' => true,
       'singular' => true,
       'permanent' => false,
       'installs' => array("ChargerFormBuilder","Charge", "ProcessCharge", "ProcessItem")
     );
   }

   public static function getDefaultConfig(){
     return array(
       'account_type' => array(
         'type' => 'InputfieldText',
         'value' => 'OTH',
         'label' => 'Account type for the lab. This generally should not change.'
       ),
       'ref_code' => array(
         'type' => 'InputfieldText',
         'value' => 'AAFABLAB',
         'label' => 'Reference code for the lab. Should be all caps.'
       ),
       'upload_item_type' => array(
         'type' => 'InputfieldPage',
         'value' => '',
         'label' => 'Which Item page represents a 3D printing charge?'
       ),
       'spring_start' => array(
         'type' => 'InputfieldDatetime',
         'value' => '',
         'label' => 'Start date for the spring semester this calendar year. Must be changed every new year.'
       ),
       'summer_start' => array(
         'type' => 'InputfieldDatetime',
         'value' => '',
         'label' => 'Start date for the summer semester this calendar year. Must be changed every new year.'
       ),
       'fall_start' => array(
         'type' => 'InputfieldDatetime',
         'value' => '',
         'label' => 'Start date for the fall semester this calendar year. Must be changed every new year.'
       ),
       'chargesPageID' => array(
         'type' => 'InputfieldInteger',
         'value' => 0,
         'label' => 'ID for charges page. Should be filled automatically, should not generally be changed.'
       ),
       'itemsPageID' => array(
         'type' => 'InputfieldInteger',
         'value' => 0,
         'label' => 'ID for charges page. Should be filled automatically, should not generally be changed.'
       ),
       'uploadsPageID' => array(
         'type' => 'InputfieldInteger',
         'value' => 0,
         'label' => 'ID for charges page. Should be filled automatically, if the Uploader module is installed. Should not generally be changed.'
       )
     );
   }

   /**
   *
   */

   public static function getFields(){
     return array(
       'charge_fields' => array(
         'title' => 'PageTitle',
         'acct_type' => 'FieldtypeText',
         'item_type' => 'FieldtypePage',
         'ufid' => 'FieldtypeText',
         'amount' => 'FieldtypeFloat',
         'ref_number' => 'FieldtypeText',
         'timestamp' => 'FieldtypeText',
         'term' => 'FieldtypeText',
         'due_date' => 'FieldtypeText',
         'reversal' => 'FieldtypeCheckbox',
       ),
       'item_fields' => array(
         'title' => 'PageTitle',
         'type_code' => 'FieldtypeText',
         'description' => 'FieldtypeTextarea'
       )
     );
   }

   public static function getInputfields(){
     return array(
       'charge_form' => array( // for backend: send charge file
         'charge_preview' => array(
           'type' => 'InputfieldTextarea',
           'label' => 'Charge Preview',
           'id' => 'charge_preview',
           'name' => 'charge_preview',
           'value' => '',
           'required' => true
         ),
         'charge' => array(
           'type' => 'InputfieldSubmit',
           'label' => 'Submit Charge',
           'id' => 'charge',
           'name' => 'charge',
           'value' => 'Submit Charge'
         )
       )
     );
   }

   /**
   *
   */

   public function ready(){
     if($this->page->id == $this->chargesPageID){
       // add tab for submit charge to edit charge page
       $this->addHookAfter("ProcessPageEdit::buildForm", $this, "buildChargeForm");
     }
   }

   /**
   *
   */

   protected function handleSubmitCharge(){
    //  the admin just clicked on the submit charge button
     if($this->input->post->charge)
     $charge = new Charge($this->input->post);
     $charge->submit();
   }

   /**
   *
   */

   protected function buildChargeForm(HookEvent $event){
     $builder = new ChargeFormBuilder($event);
     $form = $event->return;
    //  $form->append($builder->chargeTab());
     $event->return = $builder->chargeTab();
   }

   /**
   *
   */

   private function getProcessListPage(){
     $p = $this->wire('pages')->get("name=charger");
     if(!$p->id){
       $p = new Page();
       $p->template = "admin";
       $p->name = "charger";
       $p->title = "Charger";
       $p->process = $this->wire('modules')->get('ProcessList');
       $p->parent = $this->wire('pages')->get($this->wire('config')->adminRootPageID);
       $p->save();
     }
     return $p;
   }

   /**
   *
   */

   private function getTemplate($fieldsArray, $type){
     $t = $this->templates->get("name=".$type);
     if(!$t->id){
         $t = new Template();
         $t->name = $type;
         $t->tags = "user";
         $t->noChildren = 0;
         $t->noParents = 0;
         $t->fieldgroup = $this->getFieldgroup($fieldsArray, $type);
         $t->save();
     }
     return $t;
   }

   /**
   *
   */

   private function getFieldgroup($fieldsArray, $type){
     $fg = $this->fieldgroups->get("name=".$type);
     if(!$fg->id){
         $fg = new Fieldgroup();
         $fg->name = $type;
         foreach ($fieldsArray as $name => $kind) {
             $fg->append($this->getField($name, $kind));
         }
         $fg->save();
     }

     return $fg;
   }

   private function getField($name, $type){
     $f = $this->fields->get("name=$name");
     if(!$f->id){
         $f = new Field();
         $f->name = $name;
         $f->type = $type;
         if(!strcmp($type, "FieldtypeFile")){
           $f->extensions = str_replace(",", " ", self::getDefaultConfig()["allowed_filetypes"]["value"]);
           $f->maxFiles = 1;
         }
         if(!strcmp($type, "FieldtypePage")){
           // TODO: custom configuration for page fieldtype?
           $f->findPagesSelector = 'template=item, check_access=0, include=all';
           $f->template_id = wire('templates')->get("name=item")->id;
           $f->inputfield = "InputfieldSelect";
         }
         $f->label = ucwords(str_replace("_", " ", $name));
         $f->tags = "user";
         $f->save();
     }
     return $f;
   }

   /**
   *
   */

   private function deletePageByName($name){
     $this->message("page name: " . $name);
     $page = $this->wire('pages')->get("name=$name, include=all, check_access=0");
     if($page->id){
       $this->message("delete page: " . $page->name);
       $this->wire('pages')->delete($page, true);
     }
   }

   /**
   *
   */

   private function deletePagesByTemplate($name){
     $pages = $this->wire('pages')->find("template=$name, include=all, check_access=0");
       foreach ($pages as $key => $p) {
         $this->message("Page:" . $key . " => " . $p);
         $this->message("delete page: " . $p->name);
         $this->wire('pages')->delete($p, true);
       }
   }

   /**
   *
   */

   private function deletePagesByProcess($prarray){
     foreach ($prarray as $pname) {
       $this->message("process page: " . $pname);
       $id = wire('modules')->getModuleID($pname);
       $this->message("Module ID: $id");
       if($id){
           $ppgs = wire("pages")->find("process=$id, include=all, check_access=0");
           foreach ($ppgs as $key => $page) {
               $this->message("delete process page: " . $page->name);
               $this->wire("pages")->delete($page, true);
           }
       }
     }
   }

   /**
   *
   */

   private function deleteTemplateByName($name){
       $this->message("Template:" . $name);
       $template = wire('templates')->get($name);
       $fg = wire('fieldgroups')->get($name);
       if($template->id){
         $this->message("delete template: " . $template->name);
         $this->wire("templates")->delete($template);

       }
       if($fg->id){
         $this->message("delete fieldgroup: " . $fg->name);
         $this->wire("fieldgroups")->delete($fg);
       }
   }

   /**
   *
   */

   private function deleteFields($fields){
     foreach($fields as $key => $f){
       $this->message("Field:" . $key . " => " . $f);
       $field = $this->wire('fields')->get($key);
       if($field->id && !strcmp($field->tags, "user")) {
         $this->message("delete field: " . $field->name);
         $this->wire('fields')->delete($field);
       }
     }
   }

   public function install(){
     // create Charger page, assign ProcessList process
     $chargerPage = $this->getProcessListPage();
     // create Charge template, create item template
     $chargerTemplate = $this->getTemplate($fields['charge_fields'], "charge");
     $chargerTemplate = $this->getTemplate($fields['item_fields'], "item");
   }

   public function uninstall(){
     // delete all charge pages, delete all item pages
     $this->deletePagesByTemplate("charge");
     $this->deletePagesByTemplate("item");
     // delete charge list page, item list page
     $this->deletePagesByProcess(array("ProcessCharge", "ProcessItem"));
     // delete charger list page
     $this->deletePageByName("charger");
     // delete charge template, delete item template
     $this->deleteTemplateByName("charge");
     $this->deleteTemplateByName("item");
     // delete charge fields, delete charge item fields
     $this->deleteFields($fields['charge_fields']);
     $this->deleteFields($fields['item_fields']);
   }
 }
?>
